#############################
#      DENITE PLUGINS       #
#############################
# {{{
[[plugins]]
repo = 'kan-bayashi/denite.nvim'
rev = '2.2'
on_cmd = 'Denite'
hook_source = '''
  " default settings
  call denite#custom#option('default', 'prompt', '>>>')
  call denite#custom#option('default', 'statusline', v:false)

  " use fd instead of find
  if executable('fd')
    call denite#custom#var('file/rec', 'command',
      \ ['fd', '--type', 'file', '-H', '--ignore-file', expand('~/.ignore'), '.'])
    call denite#custom#var('directory_rec', 'command',
      \ ['fd', '--type', 'directory', '--hidden', '--no-ignore', '.'])
  endif

  " use rg intead of grep
  if executable('rg')
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
  endif

  " replace with grep
  function! DeniteGrepAllReplace(context)
    let qflist = []
    for target in a:context['targets']
      if !has_key(target, 'action__path') | continue | endif
      if !has_key(target, 'action__line') | continue | endif
      if !has_key(target, 'action__text') | continue | endif

      call add(qflist, {
            \ 'filename': target['action__path'],
            \ 'lnum': target['action__line'],
            \ 'text': target['action__text']
            \ })
    endfor
    call setqflist(qflist)
    call qfreplace#start('')
  endfunction
  call denite#custom#action('file', 'replace', function('DeniteGrepAllReplace'))
'''
hook_add = '''
  " shortcut setting
  nnoremap <silent> <C-f>f :<C-u>Denite -winheight=15 file/rec<CR>
  nnoremap <silent> <C-f>d :<C-u>Denite -winheight=15 directory_rec<CR>
  nnoremap <silent> <C-f>g :<C-u>Denite -winheight=15 grep<CR>
  nnoremap <silent> <C-f>b :<C-u>Denite -winheight=15 buffer<CR>
  nnoremap <silent> <C-f><C-g> :<C-u>Denite -winheight=15 grep:::!<CR>
  nnoremap <silent> <C-f><C-f> :<C-u>Denite -resume -mode=normal<CR>
  nnoremap <silent> <C-f>/ :<C-u>Denite -winheight=15 -auto-highlight line<CR>
  nnoremap <silent> <C-f>* :<C-u>DeniteCursorWord -winheight=15 -auto-highlight -mode=normal line<CR>
'''
# }}}

#############################
#      SOURCE ON EVENT      #
#############################
# {{{
[[plugins]]
repo = 'mg979/vim-visual-multi'
on_event = 'CursorMoved'

[[plugins]]
repo = 'airblade/vim-gitgutter'
# fix version since highlight of sign column does not work well
rev = 'c27bfab8c51e77419ee0c4a9c4e3ba359dbc2ad4'
on_event = ['RooterChDir']
hook_add = '''
  nmap <Space>ht :GitGutterLineHighlightsToggle<CR>
  nmap <Space>ha <Plug>(GitGutterStageHunk)
  nmap <Space>hu <Plug>(GitGutterUndoHunk)
  nmap <Space>hn <Plug>(GitGutterNextHunk)
  nmap <Space>hp <Plug>(GitGutterPrevHunk)
  set signcolumn=yes
  set updatetime=100
'''
hook_source = '''
  let g:gitgutter_sign_added = '+'
  let g:gitgutter_sign_modified = '-'
  let g:gitgutter_sign_removed = 'x'
  let g:gitgutter_terminal_reports_focus = 0
  if executable('rg')
    let g:gitgutter_grep = 'rg'
  endif
'''
# }}}

#############################
#  SOURCE ON MAP & COMMAND  #
#############################
# {{{
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = 'vmap <Enter> <Plug>(EasyAlign)'

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>(yankround-'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = ['NERDTreeToggle', 'NERDTree']
hook_add = 'map <Space><Space> :NERDTreeToggle<CR>'
# }}}

#############################
#    SOURCE ON FILETYPE     #
#############################
# {{{
[[plugins]]
repo = 'heavenshell/vim-pydocstring'
on_ft = 'python'
hook_add = '''
  nmap <silent> <C-_> <Plug>(pydocstring)
'''
build = 'make install'
hook_source = '''
  let g:pydocstring_formatter = 'google'
'''

[[plugins]]
repo = 'masukomi/vim-markdown-folding'
on_ft = 'markdown'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = 'let g:vim_json_syntax_conceal = 0'

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

# [[plugins]]
# repo = 'Shougo/context_filetype.vim'

# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']
# on_ft = ['toml', 'markdown']
# }}}
