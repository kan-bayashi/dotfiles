#############################
#         REQUIRED!         #
#############################
# {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''
# }}}

#############################
#    APPEARANCE PLUGINS     #
#############################
# {{{
[[plugins]]
repo = 'josa42/vim-lightline-coc'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive', 'vim-gitgutter']
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'jellybeans',
    \ 'component': {
    \   'readonly': '%{&readonly?"x":""}',
    \ },
    \ 'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
    \ 'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"},
    \ 'active': {
    \   'left': [ ['mode', 'paste'],
    \             ['fugitive'],
    \             ['gitguitter'],
    \             ['filename'],
    \           ],
    \   'right': [ ['linter_ok', 'linter_errors', 'linter_warnings', 'linter_info'],
    \              ['percent'],
    \              ['fileformat', 'fileencoding', 'filetype'],
    \            ]
    \ },
    \ 'component_function': {
    \   'mode': 'LightLineMode',
    \   'fugitive': 'LightLineFugitive',
    \   'filename': 'LightLineFilename',
    \   'filetype': 'LightLineFiletype',
    \   'fileformat': 'LightLineFileformat',
    \   'gitguitter': 'LightLineGitGutter'
    \ },
    \ 'component_expand': {
    \   'linter_info': 'lightline#coc#info',
    \   'linter_warnings': 'lightline#coc#warnings',
    \   'linter_errors': 'lightline#coc#errors',
    \   'linter_ok': 'lightline#coc#ok'
    \ },
    \ 'component_type': {
    \   'linter_info': 'info',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'ok'
    \ }
    \ }

  let g:lightline#coc#indicator_info = "\uf449 "
  let g:lightline#coc#indicator_errors = "\uf41b "
  let g:lightline#coc#indicator_warnings = "\uf420 "
  let g:lightline#coc#indicater_ok = "\uf42e "

  " let g:lightline_error_symbol = "\uf41b "
  " let g:lightline_warn_symbol = "\uf420 "
  " let g:lightline_ok_symbol = "\uf42e "

  " function! LightLineLinterWarnings() abort
  "   let l:counts = ale#statusline#Count(bufnr(''))
  "   let l:all_errors = l:counts.error + l:counts.style_error
  "   let l:all_non_errors = l:counts.total - l:all_errors
  "   return l:counts.total == 0 ? '' : printf('%d '. g:lightline_warn_symbol, all_non_errors)
  " endfunction
  "
  " function! LightLineLinterErrors() abort
  "   let l:counts = ale#statusline#Count(bufnr(''))
  "   let l:all_errors = l:counts.error + l:counts.style_error
  "   let l:all_non_errors = l:counts.total - l:all_errors
  "   return l:counts.total == 0 ? '' : printf('%d '. g:lightline_error_symbol, all_errors)
  " endfunction
  "
  " function! LightLineLinterOK() abort
  "   let l:counts = ale#statusline#Count(bufnr(''))
  "   let l:all_errors = l:counts.error + l:counts.style_error
  "   let l:all_non_errors = l:counts.total - l:all_errors
  "   return l:counts.total == 0 ? g:lightline_ok_symbol : ''
  " endfunction
  "
  " augroup LightLineLinter
  "   autocmd!
  "   autocmd User ALEJobStarted call lightline#update()
  "   autocmd User ALELintPost call lightline#update()
  "   autocmd User ALEFixPost call lightline#update()
  " augroup END

  function! LightLineMode()
    return  &ft == 'unite' ? 'Unite' :
          \ &ft == 'vimfiler' ? 'VimFiler' :
          \ &ft == 'denite' ? 'Denite' :
          \ &ft == 'vimshell' ? 'VimShell' :
          \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  let g:lightline_gitgutter_sign_added = '+'
  let g:lightline_gitgutter_sign_modified = '-'
  let g:lightline_gitgutter_sign_removed = 'x'

  function! LightLineGitGutter()
    if ! exists('*GitGutterGetHunkSummary')
      \ || ! get(g:, 'gitgutter_enabled', 0)
      \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
      \ g:lightline_gitgutter_sign_added . ' ',
      \ g:lightline_gitgutter_sign_modified . ' ',
      \ g:lightline_gitgutter_sign_removed . ' '
      \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction

  function! LightLineFugitive()
    let l:git_master_symbol = "\ue0a0 "
    let l:git_branch_symbol = "\ue0a0 "
    try
      if &ft !~? 'vimfiler\|gundo'
        let _ = fugitive#head()
        if _ == 'master'
          return strlen(_) ? l:git_master_symbol ._ : ''
        else
          return strlen(_) ? l:git_branch_symbol ._ : ''
        endif
      endif
    catch
    endtry
    return ''
  endfunction

  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &ro ? 'тнд' : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
      \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
      \  &ft == 'unite' ? unite#get_status_string() :
      \  &ft == 'denite' ? LightLineDenite() :
      \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
      \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
      \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

  function! LightLineDenite()
    let mode_str = substitute(denite#get_status_mode(), "-\\| ", "", "g")
    call lightline#link(tolower(mode_str[0]))
    return mode_str
  endfunction

  let g:lightline.tab = {
    \ 'active': ['active_filename', 'modified'],
    \ 'inactive': ['tabnum', 'filename', 'modified']
    \ }

  let g:lightline.tab_component_function = {
    \ 'active_filename': 'LightlineTabFilename'
    \ }

  function! LightlineTabFilename(n) abort
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let _ = expand('#'.buflist[winnr - 1].':t')
    return _ !=# '' ? "\ue624 " . _ : '[No Name]'
  endfunction
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_color_term = 239
  let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'startify']
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
# }}}

#############################
#       OTHER PLUGINS       #
#############################
# {{{
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'lambdalisue/suda.vim'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  set splitbelow
  let g:quickrun_config = {
   \ "_" : { "outputter/buffer/split" : ":botright 10",
   \         "runner" : "vimproc",
   \         "runner/vimproc/updatetime" : 40 }
   \ }
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <space>gs :Gstatus<CR>
  nnoremap <space>ga :Gwrite<CR>
  nnoremap <space>gc :Gcommit<CR>
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add='''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " additional settings
    setlocal spell
    setlocal spelllang+=cjk

    " if no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
      startinsert
    end

    " scroll the diff window from insert mode
    " map <c-n> and <c-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
  endfunction
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
  " keymappig for terminal in vim
  if has('terminal')
    tmap <c-k> <c-w>:TmuxNavigateUp<cr>
    tmap <c-j> <c-w>:TmuxNavigateDown<cr>
    tmap <c-h> <c-w>:TmuxNavigateLeft<cr>
    tmap <c-l> <c-w>:TmuxNavigateRight<cr>
  endif
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  let g:extra_whitespace_ignored_filetypes = ['nerdtree', 'startify', 'help']
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'Raimondi/delimitMate'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
  let s:startify_ascii_header = [
    \ '                                              ..                                            ',
    \ '                                          .::::.                                            ',
    \ '                             ___________ :;;;;:`____________                                ',
    \ '                             \_________/ ?????L \__________/                                ',
    \ '                               |.....| ????????> :.......''                                 ',
    \ '                               |:::::| $$$$$$"`.:::::::'' ,                                 ',
    \ '                              ,|:::::| $$$$"`.:::::::'' .OOS.                               ',
    \ '                            ,7D|;;;;;| $$"`.;;;;;;;'' .OOO888S.                             ',
    \ '                          .GDDD|;;;;;| ?`.;;;;;;;'' .OO8DDDDDNNS.                           ',
    \ '                           ''DDO|IIIII| .7IIIII7'' .DDDDDDDDNNNF`                           ',
    \ '                             ''D|IIIIII7IIIII7'' .DDDDDDDDNNNF`                             ',
    \ '                               |EEEEEEEEEE7'' .DDDDDDDNNNNF`                                ',
    \ '                               |EEEEEEEEZ'' .DDDDDDDDNNNF`                                  ',
    \ '                               |888888Z'' .DDDDDDDDNNNF`                                    ',
    \ '                               |8888Z'' ,DDDDDDDNNNNF`                                      ',
    \ '                               |88Z''    "DNNNNNNN"                                         ',
    \ '                               ''"''        "MMMM"                                          ',
    \ '                                            ""                                              ',
    \ '                                                                                            ',
    \ '    ___    ____                                            __   _         _    ________  ___',
    \ '   /   |  / / /  __  ______  __  __   ____  ___  ___  ____/ /  (_)____   | |  / /  _/  |/  /',
    \ '  / /| | / / /  / / / / __ \/ / / /  / __ \/ _ \/ _ \/ __  /  / / ___/   | | / // // /|_/ / ',
    \ ' / ___ |/ / /  / /_/ / /_/ / /_/ /  / / / /  __/  __/ /_/ /  / (__  )    | |/ // // /  / /  ',
    \ '/_/  |_/_/_/   \__, /\____/\__,_/  /_/ /_/\___/\___/\__,_/  /_/____/     |___/___/_/  /_/   ',
    \ '              /____/                                                                        ',
    \ '',
    \]
  let g:startify_custom_header = map(s:startify_ascii_header, '"   ".v:val')
'''

[[plugins]]
repo = 'roxma/vim-paste-easy'

[[plugins]]
repo = 'Konfekt/FastFold'
hook_add = 'let g:fastfold_fold_command_suffixes = []'

[[plugins]]
repo     = 'airblade/vim-rooter'
hook_add = 'let g:rooter_silent_chdir = 1'
# }}}

#############################
#        LSP PLUGINS        #
#############################
# {{{
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
" Default install packages
let g:coc_global_extensions = ['coc-json', 'coc-pyright', 'coc-diagnostic']
let g:coc_node_args = ['--max-old-space-size=8192']

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" GoTo code navigation.
nmap <silent> <space>d <Plug>(coc-definition)

" Symbol renaming.
nmap <space>r <Plug>(coc-rename)

" Symbol renaming.
nmap <space>f <Plug>(coc-format)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
'''
# }}}
