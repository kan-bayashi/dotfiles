#############################
#         REQUIRED!         #
#############################
# {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '''!has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if   = '''!has('nvim')'''
# }}}

#############################
#    APPEARANCE PLUGINS     #
#############################
# {{{
[[plugins]]
repo = 'josa42/vim-lightline-coc'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive', 'vim-gitgutter', 'vim-lightline-coc']
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ 'component': {
  \   'readonly': '%{&readonly?"x":""}',
  \ },
  \ 'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
  \ 'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"},
  \ 'active': {
  \   'left': [ ['mode', 'paste'],
  \             ['fugitive'],
  \             ['gitguitter'],
  \             ['filename'],
  \           ],
  \   'right': [ ['linter_ok', 'linter_errors', 'linter_warnings', 'linter_info'],
  \              ['percent'],
  \              ['fileformat', 'fileencoding', 'filetype'],
  \            ]
  \ },
  \ 'component_function': {
  \   'mode': 'LightLineMode',
  \   'fugitive': 'LightLineFugitive',
  \   'filename': 'LightLineFilename',
  \   'filetype': 'LightLineFiletype',
  \   'fileformat': 'LightLineFileformat',
  \   'gitguitter': 'LightLineGitGutter'
  \ },
  \ 'component_expand': {
  \   'linter_info': 'lightline#coc#info',
  \   'linter_warnings': 'lightline#coc#warnings',
  \   'linter_errors': 'lightline#coc#errors',
  \   'linter_ok': 'lightline#coc#ok'
  \ },
  \ 'component_type': {
  \   'linter_info': 'info',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'ok'
  \ }
  \ }

let g:lightline#coc#indicator_info = "\uf449 "
let g:lightline#coc#indicator_errors = "\uf41b "
let g:lightline#coc#indicator_warnings = "\uf420 "
let g:lightline#coc#indicater_ok = "\uf42e "

function! LightLineMode()
  return  &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'denite' ? 'Denite' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

let g:lightline_gitgutter_sign_added = '+'
let g:lightline_gitgutter_sign_modified = '-'
let g:lightline_gitgutter_sign_removed = 'x'

function! LightLineGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
    \ || ! get(g:, 'gitgutter_enabled', 0)
    \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
    \ g:lightline_gitgutter_sign_added . ' ',
    \ g:lightline_gitgutter_sign_modified . ' ',
    \ g:lightline_gitgutter_sign_removed . ' '
    \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

function! LightLineFugitive()
  let l:git_master_symbol = "\ue0a0 "
  let l:git_branch_symbol = "\ue0a0 "
  try
    if &ft !~? 'vimfiler\|gundo'
      let _ = fugitive#head()
      if _ == 'master'
        return strlen(_) ? l:git_master_symbol ._ : ''
      else
        return strlen(_) ? l:git_branch_symbol ._ : ''
      endif
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
    \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
    \  &ft == 'unite' ? unite#get_status_string() :
    \  &ft == 'denite' ? LightLineDenite() :
    \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
    \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightLineDenite()
  let mode_str = substitute(denite#get_status_mode(), "-\\| ", "", "g")
  call lightline#link(tolower(mode_str[0]))
  return mode_str
endfunction

let g:lightline.tab = {
  \ 'active': ['active_filename', 'modified'],
  \ 'inactive': ['tabnum', 'filename', 'modified']
  \ }

let g:lightline.tab_component_function = {
  \ 'active_filename': 'LightlineTabFilename'
  \ }

function! LightlineTabFilename(n) abort
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let _ = expand('#'.buflist[winnr - 1].':t')
  return _ !=# '' ? "\ue624 " . _ : '[No Name]'
endfunction
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_color_term = 239
let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'dashboard']
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'rktjmp/lush.nvim'

[[plugins]]
repo    = 'kan-bayashi/nvim-jellybeans'
depends = ['lush.nvim']
# }}}

#############################
#       OTHER PLUGINS       #
#############################
# {{{
[[plugins]]
repo  = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
set splitbelow
let g:quickrun_config = {
 \ "_" : { "outputter/buffer/split" : ":botright 10",
 \         "runner" : "vimproc",
 \         "runner/vimproc/updatetime" : 40 }
 \ }
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
rev = '321328c'
hook_add = '''
nnoremap <space>gs :Git<CR>
nnoremap <space>ga :Gwrite<CR>
nnoremap <space>gc :Git commit<CR>
autocmd FileType fugitive nmap <buffer> q gq
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
  " additional settings
  setlocal spell
  setlocal spelllang+=cjk

  " if no commit message, start with insert mode
  if a:info.vcs ==# 'git' && getline(1) ==# ''
    startinsert
  end

  " scroll the diff window from insert mode
  " map <c-n> and <c-p>
  imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
  imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
" keymappig for terminal in vim
if has('terminal')
  tmap <c-k> <c-w>:TmuxNavigateUp<cr>
  tmap <c-j> <c-w>:TmuxNavigateDown<cr>
  tmap <c-h> <c-w>:TmuxNavigateLeft<cr>
  tmap <c-l> <c-w>:TmuxNavigateRight<cr>
endif
'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
let g:better_whitespace_filetypes_blacklist = ['nerdtree', 'dashboard', 'help']
'''

[[plugins]]
repo = 'stefandtw/quickfix-reflector.vim'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'Raimondi/delimitMate'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'glepnir/dashboard-nvim'
rev = '21ba482'
hook_add = '''
let g:dashboard_default_executive ='telescope'
let g:dashboard_custom_header = [
\ '',
\ '',
\ '',
\ ' ███╗   ██╗ ███████╗ ██████╗  ██╗   ██╗ ██╗ ███╗   ███╗',
\ ' ████╗  ██║ ██╔════╝██╔═══██╗ ██║   ██║ ██║ ████╗ ████║',
\ ' ██╔██╗ ██║ █████╗  ██║   ██║ ██║   ██║ ██║ ██╔████╔██║',
\ ' ██║╚██╗██║ ██╔══╝  ██║   ██║ ╚██╗ ██╔╝ ██║ ██║╚██╔╝██║',
\ ' ██║ ╚████║ ███████╗╚██████╔╝  ╚████╔╝  ██║ ██║ ╚═╝ ██║',
\ ' ╚═╝  ╚═══╝ ╚══════╝ ╚═════╝    ╚═══╝   ╚═╝ ╚═╝     ╚═╝',
\ '',
\]
'''

[[plugins]]
repo = 'roxma/vim-paste-easy'

[[plugins]]
repo     = 'Konfekt/FastFold'
hook_add = 'let g:fastfold_fold_command_suffixes = []'

[[plugins]]
repo     = 'airblade/vim-rooter'
hook_add = 'let g:rooter_silent_chdir = 1'

[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_add = '''
call wilder#setup({'modes': [':', '/', '?']})
call wilder#set_option('renderer', wilder#popupmenu_renderer(wilder#popupmenu_border_theme({
      \ 'highlighter': wilder#basic_highlighter(),
      \ 'highlights': {
      \   'accent': wilder#make_hl('WilderAccent', 'Pmenu', [{}, {}, {'background': '#ffc400', 'bold': 1, 'underline': 1}]),
      \ },
      \ 'max_height': '40%',
      \ 'border': 'rounded',
      \ 'empty_message': wilder#popupmenu_empty_message_with_spinner(),
      \ 'left': [
      \   ' ',
      \   wilder#popupmenu_devicons(),
      \   wilder#popupmenu_buffer_flags({
      \     'flags': ' a+ ',
      \     'icons': {'+': '', 'a': '', 'h': ''},
      \   }),
      \ ],
      \ 'right': [
      \   ' ',
      \   wilder#popupmenu_scrollbar(),
      \ ],
      \ })))
call wilder#set_option('pipeline', [
      \   wilder#branch(
      \     wilder#python_file_finder_pipeline({
      \       'file_command': ['fd', '--type', 'file', '-H', '--ignore-file', expand('~/.ignore'), '.'],
      \       'dir_command': ['fd', '--type', 'directory', '--hidden', '--no-ignore', '.'],
      \       'filters': ['fuzzy_filter', 'difflib_sorter'],
      \     }),
      \     wilder#cmdline_pipeline(),
      \     wilder#python_search_pipeline(),
      \   ),
      \ ])
'''

[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
let g:translate_popup_window = 1
'''
# }}}

#############################
#        LSP PLUGINS        #
#############################
# {{{
[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = "<nop>"
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
" Default install packages
let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-pyright',
      \ 'coc-diagnostic',
      \ 'coc-word',
      \ 'coc-syntax',
      \ 'coc-snippets',
      \ 'coc-yaml',
      \ 'coc-toml',
      \ ]

" Use <C-k> for trigger snippet expand.
imap <C-k> <Plug>(coc-snippets-expand)
let g:coc_snippet_next = '<C-n>'
let g:coc_snippet_prev = '<C-p>'

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <space>d <Plug>(coc-definition)

" Symbol renaming.
nmap <space>r <Plug>(coc-rename)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap <C-d> and <C-u> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
rev = '6390eff'
hook_add = '''
lua << EOF
require('nvim-treesitter.configs').setup {
  highlight = {
    enable = true,
  },
  ensure_installed = {
    "python",
    "bash",
    "json",
    "toml",
    "yaml",
    "typescript",
    "javascript",
    "tsx",
    "make",
    "markdown",
  },
  additional_vim_regex_highlighting = false,
}
EOF
'''
# }}}
