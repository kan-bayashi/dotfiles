#############################
#         REQUIRED!         #
#############################
# {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''
# }}}

#############################
#    APPEARANCE PLUGINS     #
#############################
# {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive', 'vim-gitgutter', 'ale']
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'jellybeans',
    \ 'component': {
    \   'readonly': '%{&readonly?"x":""}',
    \ },
    \ 'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
    \ 'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"},
    \ 'active': {
    \   'left': [ ['mode', 'paste'],
    \             ['fugitive'],
    \             ['gitguitter'],
    \             ['filename'],
    \           ],
    \   'right': [ ['linter_ok', 'linter_errors', 'linter_warnings'],
    \              ['percent'],
    \              ['fileformat', 'fileencoding', 'filetype'],
    \            ]
    \ },
    \ 'component_function': {
    \   'mode': 'LightLineMode',
    \   'fugitive': 'LightLineFugitive',
    \   'filename': 'LightLineFilename',
    \   'filetype': 'LightLineFiletype',
    \   'fileformat': 'LightLineFileformat',
    \   'gitguitter': 'LightLineGitGutter',
    \   'linter_warnings': 'LightLineLinterWarnings',
    \   'linter_errors': 'LightLineLinterErrors',
    \   'linter_ok': 'LightLineLinterOK'
    \ },
    \ 'component_expand': {
    \   'linter_warnings': 'LightLineLinterWarnings',
    \   'linter_errors': 'LightLineLinterErrors',
    \   'linter_ok': 'LightLineLinterOK'
    \ },
    \ 'component_type': {
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'ok'
    \ }
    \ }

  let g:lightline_error_symbol = "\uf41b "
  let g:lightline_warn_symbol = "\uf420 "
  let g:lightline_ok_symbol = "\uf42e "

  function! LightLineLinterWarnings() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '' : printf('%d '. g:lightline_warn_symbol, all_non_errors)
  endfunction

  function! LightLineLinterErrors() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '' : printf('%d '. g:lightline_error_symbol, all_errors)
  endfunction

  function! LightLineLinterOK() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? g:lightline_ok_symbol : ''
  endfunction

  augroup LightLineLinter
    autocmd!
    autocmd User ALEJobStarted call lightline#update()
    autocmd User ALELintPost call lightline#update()
    autocmd User ALEFixPost call lightline#update()
  augroup END

  function! LightLineMode()
    return  &ft == 'unite' ? 'Unite' :
          \ &ft == 'vimfiler' ? 'VimFiler' :
          \ &ft == 'denite' ? 'Denite' :
          \ &ft == 'vimshell' ? 'VimShell' :
          \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  let g:lightline_gitgutter_sign_added = '+'
  let g:lightline_gitgutter_sign_modified = '-'
  let g:lightline_gitgutter_sign_removed = 'x'

  function! LightLineGitGutter()
    if ! exists('*GitGutterGetHunkSummary')
      \ || ! get(g:, 'gitgutter_enabled', 0)
      \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
      \ g:lightline_gitgutter_sign_added . ' ',
      \ g:lightline_gitgutter_sign_modified . ' ',
      \ g:lightline_gitgutter_sign_removed . ' '
      \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction

  function! LightLineFugitive()
    let l:git_master_symbol = "\uf402 "
    let l:git_branch_symbol = "\uf418 "
    try
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        let _ = fugitive#head()
        if _ == 'master'
          return strlen(_) ? l:git_master_symbol ._ : ''
        else
          return strlen(_) ? l:git_branch_symbol ._ : ''
        endif
      endif
    catch
    endtry
    return ''
  endfunction

  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &ro ? 'тнд' : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
      \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
      \  &ft == 'unite' ? unite#get_status_string() :
      \  &ft == 'denite' ? LightLineDenite() :
      \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
      \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
      \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

  function! LightLineDenite()
    let mode_str = substitute(denite#get_status_mode(), "-\\| ", "", "g")
    call lightline#link(tolower(mode_str[0]))
    return mode_str
  endfunction

  let g:lightline.tab = {
    \ 'active': ['active_filename', 'modified'],
    \ 'inactive': ['tabnum', 'filename', 'modified']
    \ }

  let g:lightline.tab_component_function = {
    \ 'active_filename': 'LightlineTabFilename'
    \ }

  function! LightlineTabFilename(n) abort
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let _ = expand('#'.buflist[winnr - 1].':t')
    return _ !=# '' ? "\ue624 " . _ : '[No Name]'
  endfunction
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = 'let g:indentLine_color_term = 239'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
# }}}

#############################
#       OTHER PLUGINS       #
#############################
# {{{
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  set splitbelow
  let g:quickrun_config = {
   \ "_" : { "outputter/buffer/split" : ":botright 10",
   \         "runner" : "vimproc",
   \         "runner/vimproc/updatetime" : 40 }
   \ }
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
  " keymappig for terminal in vim
  if has('terminal')
    tmap <c-k> <c-w>:TmuxNavigateUp<cr>
    tmap <c-j> <c-w>:TmuxNavigateDown<cr>
    tmap <c-h> <c-w>:TmuxNavigateLeft<cr>
    tmap <c-l> <c-w>:TmuxNavigateRight<cr>
  endif
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'Konfekt/FastFold'
hook_add = 'let g:fastfold_fold_command_suffixes = []'

[[plugins]]
repo = 'wincent/vim-clipper'
if = '$OS == "mac"'

[[plugins]]
repo = 'roxma/vim-tmux-clipboard'

[[plugins]]
repo     = 'airblade/vim-rooter'
hook_add = 'let g:rooter_silent_chdir = 1'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  " key mapping
  nmap <silent> <SPACE>j <Plug>(ale_next_wrap)
  nmap <silent> <SPACE>k <Plug>(ale_previous_wrap)

  " general settings
  let g:ale_open_list = 0
  let g:ale_list_window_size = 5
  let g:ale_lint_delay = 1000
  let g:ale_lint_on_enter = 0

  " custom message and sign
  let g:ale_echo_msg_error_str = '[ERROR]'
  let g:ale_echo_msg_warning_str = '[WARNING]'
  let g:ale_echo_msg_format = '%severity% %linter% - %s'
  let g:ale_sign_error = "\uf41b"
  let g:ale_sign_warning = "\uf420"

  " linter setting
  let g:ale_linters = {
    \ 'python': ['flake8'],
    \ 'sh': ['shellcheck'],
    \ }
  let g:ale_python_flake8_args="--max-line-length=120"
'''
# }}}
